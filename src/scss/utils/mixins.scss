@use "sass:math";

// REM
@function rem($px) {
	$result: math.div($px, 16) + rem;
	@return $result;
}

// EM
@function em($px, $current: 16) {
	$result: math.div($px, $current) + em;
	@return $result;
}

// Adaptive Value (clamp)
@mixin adaptiveValue($property, $startSize, $minSize, $widthFrom: $containerWidth, $widthTo: $minWidth, $keepSize: 0) {
	@if ($startSize==0) {
		$startSize: 0.000001;
	}
	@if ($minSize==0) {
		$minSize: 0.000001;
	}

	// For calc();
	$addSize: math.div($startSize - $minSize, 16);

	@if ($widthFrom == $containerWidth and $maxWidthContainer == 0) {
		$widthFrom: $maxWidth;
	}

	// Breakpoints in EM
	$widthFromMedia: em($widthFrom);
	$widthToMedia: em($widthTo);

	// Float formula
	$slope: math.div(($startSize - $minSize), ($widthFrom - $widthTo));
	$yIntersection: -$widthTo * $slope + $minSize;
	@if ($yIntersection==0) {
		$yIntersection: 0.000001;
	}
	$flyValue: #{rem($yIntersection)}" + " #{$slope * 100}vw;

	$propertyValue: #{"clamp(" rem($minSize) "," $flyValue "," rem($startSize) ")"};
	@if ($minSize > $startSize) {
		$propertyValue: #{"clamp(" rem($startSize) "," $flyValue "," rem($minSize) ")"};
	}

	// If clamp(); is supported
	@supports (#{$property}: $propertyValue) {
		#{$property}: $propertyValue;
	}
	// If clamp(); is not supported
	@supports not (#{$property}: $propertyValue) {
		#{$property}: calc(
			#{rem($minSize)} + #{$addSize} * (100vw - #{rem($widthTo)}) / #{math.div($widthFrom, 16) -
				math.div($widthTo, 16)}
		);
	}

	// Default values
	@if $widthFrom != $containerWidth and $widthFrom != $maxWidth and $keepSize != 1 and $keepSize != 2 {
		@media (min-width: $widthFromMedia) {
			#{$property}: inherit;
		}
	}
	@if $widthTo != $minWidth and $keepSize != 1 and $keepSize != 3 {
		@media (max-width: $widthToMedia) {
			#{$property}: inherit;
		}
	}
}

// Flex
@mixin flexBased($items, $indent: rem(30)) {
	flex-basis: calc((100% - $indent * ($items - 1)) / $items);
}

// Focus-visible
%focusVisible {
	outline: 2px solid var(--accent);
	border-radius: 2px;
	transition: none;
}

%stripeEffect {
	position: relative;

	&::before {
		content: "";
		position: absolute;
		top: 100%;
		left: 0;
		width: 100%;
		border-bottom: 2px solid var(--accent);
		transform: scaleX(0);
		transition: transform var(--slower);
	}

	&:hover::before {
		transform: scale(1);
	}
}
